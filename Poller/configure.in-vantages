#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(vantages, 0.8.10, eoster@cs.ucla.edu)
AC_CONFIG_SRCDIR([dns/dns_rr.cc])
AC_CONFIG_SRCDIR([src/vantaged.cc])
AC_CONFIG_HEADER([dns/config.h])
AC_CONFIG_HEADER([src/config.h])

AC_CONFIG_MACRO_DIR([m4])

# Version of libvdns
AC_SUBST(LIBTOOL_VERSION_INFO, "0:8:10")

# GPGPME needs LFS, so here it is:
AC_SYS_LARGEFILE
AC_FUNC_FSEEKO

AC_ARG_WITH(sqlite3-lib-dir,
  AC_HELP_STRING(
    [--with-sqlite3-lib-dir],
    [SQLITE3 library directory]),
  [sqlite3_lib_dir=$withval])

AC_ARG_WITH(gpgme-lib-dir,
  AC_HELP_STRING(
    [--with-gpgme-lib-dir],
    [GPGME library directory]),
  [gpgme_lib_dir=$withval])

AC_ARG_WITH(gpg-error-lib-dir,
  AC_HELP_STRING(
    [--with-gpg-error-lib-dir],
    [GPG_ERROR library directory]),
  [gpg_error_lib_dir=$withval])

AC_ARG_WITH(expat-lib-dir,
  AC_HELP_STRING(
    [--with-expat-lib-dir],
    [EXPAT library directory]),
  [expat_lib_dir=$withval])

AC_ARG_WITH(pcap-lib-dir,
  AC_HELP_STRING(
    [--with-pcap-lib-dir],
    [PCAP library directory]),
  [pcap_lib_dir=$withval])

AC_ARG_WITH(openssl-lib-dir,
  AC_HELP_STRING(
    [--with-openssl-lib-dir],
    [OPENSSL library directory]),
  [openssl_lib_dir=$withval])

AC_ARG_WITH(vantaged,
  AC_HELP_STRING(
    [--with-vantaged],
    [Build with vantaged]),
  [with_vantaged=$withval])

#AC_MAKE_SET

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_AWK
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

if test "x$with_vantaged" = "xno"; then
  CFLAGS="$CFLAGS -D_NO_VANTAGED"
  cp -f ./Makefile-novant.in ./Makefile.in
  cp -f src/Makefile-novant.in src/Makefile.in
else
  cp -f ./Makefile-full.in ./Makefile.in
  cp -f src/Makefile-full.in src/Makefile.in

# Checks for libraries.
AC_CHECK_LIB(pthread, pthread_create)
AC_CHECK_LIB(sqlite3, sqlite3_open, SQLITE3_LIBS=" ", SQLITE3_LIBS= )
# hunt through several directories trying to find the libraries
if test "x$SQLITE3_LIBS" = "x"; then
  old_LDFLAGS="$LDFLAGS"
  for try in $sqlite3_lib_dir /usr/lib /usr/local/lib /opt/local/lib; do
    LDFLAGS="$old_LDFLAGS -L$try"
    unset ac_cv_lib_sqlite3_sqlite3_open
    AC_CHECK_LIB(sqlite3, sqlite3_open,
      SQLITE3_LIBS="-L$try",
      SQLITE3_LIBS=
    )
    LIBEXISTS="`ls $try/libsqlite3.so.* 2>/dev/null`"
    if test "x$SQLITE3_LIBS" != "x"; then
      break;
    elif test "x" != "x$LIBEXISTS" 
    then
      echo "WARNING:  ***********************************************************************************"
      echo "WARNING:  ****  Version-specific library exists, in the directory '$try' but a    ****"
      echo "WARNING:  ****  development library does not exist. It is possible that you need to      ****"
      echo "WARNING:  ****  install a development package such as 'libsqlite3-dev' on ubuntu (a full ****"
      echo "WARNING:  ****  list of requirements on various platforms is in the COMPILE file).       ****"
      echo "WARNING:  ***********************************************************************************"
    fi
  done
  LDFLAGS="$old_LDFLAGS $SQLITE3_LIBS"
fi
if test "x$SQLITE3_LIBS" = "x"; then
  AC_MSG_ERROR([SQLITE3 libraries not found.  Use --with-sqlite3-lib-dir=<path>])
fi
# don't forget to add sqlite3 to the list of libraries
LIBS="-lsqlite3 $LIBS"

# find dlopen
johnsons_LIBS="$LIBS"
LIBS=""
AC_CHECK_LIB(dl,dlopen)
LIBDL=$LIBS
LIBS="$johnsons_LIBS"
AC_SUBST(LIBDL)

johnsons_LIBS="$LIBS"   
LIBS="$LIBS $LIBDL"
AC_CHECK_FUNCS(dlopen dlerror)
#LIBS="$johnsons_LIBS"

GPGME_VERSION=""
NUM_GPGME_VERSION=""

AC_CHECK_LIB(gpgme-pthread, gpgme_check_version, GPGME_LIB=" ", GPGME_LIB= )
# hunt through several directories trying to find the libraries
if test "x$GPGME_LIB" = "x"; then
  old_LDFLAGS="$LDFLAGS"
  for try in $gpgme_lib_dir /usr/lib /usr/local/lib /opt/local/lib; do
    LDFLAGS="$old_LDFLAGS -L$try"
    unset ac_cv_lib_gpgme_pthread_gpgme_check_version
    AC_CHECK_LIB(gpgme-pthread, gpgme_check_version,
      GPGME_LIB="-L$try",
      GPGME_LIB=
    )
    if test "x$GPGME_LIB" != "x"; then
      break;
    fi
  done
  LDFLAGS="$old_LDFLAGS $GPGME_LIB"
fi
if test "x$GPGME_LIB" = "x"; then
  AC_MSG_ERROR([GPGME libraries not found.  Use --with-gpgme-lib-dir=<path>])
else
  GPGME_VERSION=`gpgme-config --version`
  NUM_GPGME_VERSION=`gpgme-config --version | $AWK -F'.' '{print ($1*1000000+$2*1000+$3)}'`
fi
# don't forget to add gpgme to the list of libraries
LIBS="-lgpgme-pthread $LIBS"


AC_CHECK_LIB(gpg-error, gpg_err_init, GPG_ERROR_LIB=" ", GPG_ERROR_LIB= )
# hunt through several directories trying to find the libraries
if test "x$GPG_ERROR_LIB" = "x"; then
  old_LDFLAGS="$LDFLAGS"
  for try in $gpg_error_lib_dir /usr/lib /usr/local/lib /opt/local/lib; do
    LDFLAGS="$old_LDFLAGS -L$try"
    unset ac_cv_lib_gpg_error_gpg_err_init
    AC_CHECK_LIB(gpg-error, gpg_err_init,
      GPG_ERROR_LIB="-L$try",
      GPG_ERROR_LIB=
    )
    if test "x$GPG_ERROR_LIB" != "x"; then
      break;
    fi
  done
  LDFLAGS="$old_LDFLAGS $GPG_ERROR_LIB"
fi
if test "x$GPG_ERROR_LIB" = "x"; then
  AC_MSG_ERROR([GPG_ERROR libraries not found.  Use --with-gpg-error-lib-dir=<path>])
fi
# don't forget to add gpg-error to the list of libraries
LIBS="-lgpg-error $LIBS"

AC_CHECK_LIB(expat, XML_ParserCreate, EXPAT_LIB=" ", EXPAT_LIB= )
# hunt through several directories trying to find the libraries
if test "x$EXPAT_LIB" = "x"; then
  old_LDFLAGS="$LDFLAGS"
  for try in $expat_lib_dir /usr/lib /usr/local/lib /opt/local/lib; do
    LDFLAGS="$old_LDFLAGS -L$try"
    unset ac_cv_lib_expat_XML_ParserCreate
    AC_CHECK_LIB(expat, XML_ParserCreate,
      EXPAT_LIB="-L$try",
      EXPAT_LIB=
    )
    if test "x$EXPAT_LIB" != "x"; then
      break;
    fi
  done
  LDFLAGS="$old_LDFLAGS $EXPAT_LIB"
fi
if test "x$EXPAT_LIB" = "x"; then
  AC_MSG_ERROR([EXPAT libraries not found.  Use --with-expat-lib-dir=<path>])
fi
# don't forget to add expat to the list of libraries
LIBS="-lexpat $LIBS"

AC_CHECK_LIB(pcap, pcap_open_live, PCAP_LIB=" ", PCAP_LIB= )
# hunt through several directories trying to find the libraries
if test "x$PCAP_LIB" = "x"; then
  old_LDFLAGS="$LDFLAGS"
  for try in $pcap_lib_dir /usr/lib /usr/local/lib /opt/local/lib; do
    LDFLAGS="$old_LDFLAGS -L$try"
    unset ac_cv_lib_pcap_pcap_open_live
    AC_CHECK_LIB(pcap, pcap_open_live,
      PCAP_LIB="-L$try",
      PCAP_LIB=
    )
    if test "x$PCAP_LIB" != "x"; then
      break;
    fi
  done
  LDFLAGS="$old_LDFLAGS $PCAP_LIB"
fi
if test "x$PCAP_LIB" = "x"; then
  AC_MSG_ERROR([PCAP libraries not found.  Use --with-pcap-lib-dir=<path>])
fi
# don't forget to add expat to the list of libraries
LIBS="-lpcap $LIBS"

# AC_CHECK_LIB(resolv, res_init)
AC_CHECK_LIB(curl, curl_global_init, CURL_LIB="-l$try", CURL_LIB)
if test "x$CURL_LIB" = "x"; then
  AC_MSG_ERROR([CURL_LIB library not found!])
fi
LIBS="$LIBS -lcurl"

fi

OPENSSL_VERSION=""
AC_CHECK_LIB(ssl, EVP_PKEY_new, OPENSSL_LIB=" ", OPENSSL_LIB= )
AC_CHECK_LIB(crypto, EVP_PKEY_new, CRYPTO_LIB=" ", CRYPTO_LIB= )
# hunt through several directories trying to find the libraries
if test "x$OPENSSL_LIB" = "x" && test "x$CRYPTO_LIB" = "x"
then
  old_LDFLAGS="$LDFLAGS"
  for try in $openssl_lib_dir /usr/lib /usr/local/lib /opt/local/lib; do
    LDFLAGS="$old_LDFLAGS -L$try"
    unset ac_cv_lib_openssl_EVP_PKEY_new
    AC_CHECK_LIB(ssl, EVP_PKEY_new,
      OPENSSL_LIB="-L$try",
      OPENSSL_LIB=
    )

    unset ac_cv_lib_crypto_EVP_PKEY_new
    AC_CHECK_LIB(crypto, EVP_PKEY_new,
      CRYPTO_LIB="-L$try",
      CRYPTO_LIB=
    )
    if test "x$OPENSSL_LIB" != "x" || test "x$CRYPTO_LIB" != "x"
    then
      break;
    fi
  done
  LDFLAGS="$old_LDFLAGS $CRYPTO_LIB $OPENSSL_LIB"
fi
if test "x$OPENSSL_LIB" = "x" && test "x$CRYPTO_LIB" = "x"
then
  AC_MSG_ERROR([OPENSSL and CRYPTO libraries not found.  Use --with-openssl-lib-dir=<path>])
else
  OPENSSL_VERSION="`openssl version | awk '{print $2}'|sed -e 's/[^0-9]*$//'|awk -F'.' '{v=(10000*$1)+(100*$2)+($3);printf(\"%s\",v)}'`"
  if test "x$CRYPTO_LIB" != "x"
  then
    LIBS="-lcrypto $LIBS"
  fi

  if test "x$OPENSSL_LIB" != "x"
  then
    LIBS="-lssl $LIBS"
  fi
fi

# for macosx, see if glibtool exists and use that
# BSD's need to know the version...
# Borrowed from somewhere from a search engine
LT_INIT
AC_CHECK_PROG(libtool, glibtool, [glibtool], )
AC_CHECK_PROG(libtool, libtool, [./libtool], )

if test "x$libtool" = "x"
then
  AC_MSG_ERROR([LIBTOOL was not found!  Please install libtool or glibtool in order to compile])
fi

AC_PATH_TOOL(AR, ar, [false])
if test $AR = false; then
  AC_MSG_ERROR([Cannot find 'ar', please extend PATH to include it])
fi


AC_PROG_LIBTOOL

# Checks for header files.
AC_CHECK_HEADERS([fcntl.h sys/ioctl.h sys/time.h unistd.h arpa/inet/h netinet/in.h stdint.h string.h sys/socket.h readpassphrase.h pwd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDC
AC_HEADER_STDBOOL
AC_HEADER_TIME
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

# Checks for library functions.
AC_CHECK_FUNCS([memset setlocale socket strerror])

if test "$OPENSSL_VERSION" -lt 908
then
  CFLAGS="$CFLAGS -D_DNS_NO_SHA256"
  CXXFLAGS="$CXXFLAGS -D_DNS_NO_SHA256"
fi

AC_OUTPUT([Makefile dns/Makefile src/Makefile scripts/vant-upgrade.pl])

if test "x$with_vantaged" = "xyes" && test "$NUM_GPGME_VERSION" -lt 1001006
then
  echo "WARNING:  ***********************************************************************************"
  echo "WARNING:  ****  GPGME Library version $GPGME_VERSION is too old: SHOULD be at least 1.1.6          ***"
  echo "WARNING:  ****  Using version $GPGME_VERSION can result in GPGME-specific issues such as           ***"
  echo "WARNING:  ****  memory leaks: https://bugs.g10code.com/gnupg/issue1014                    ***"
  echo "WARNING:  ***********************************************************************************"
fi
